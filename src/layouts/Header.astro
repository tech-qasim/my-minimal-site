---
import { HEADER_LINKS } from '~/config'
import ThemeToggle from '~/components/theme/ThemeToggle'
import HeaderGradient from '~/components/theme/HeaderGradient.astro'
import SectionDivider from '~/components/base/SectionDivider.astro'
import HeaderLink from '~/components/base/HeaderLink.astro'
import SearchSwitch from '~/components/base/SearchSwitch.astro'
import { Image } from 'astro:assets'
import favicon from '../../public/favicon.svg'
---

<HeaderGradient />
<header id="main-header" class="sticky top-0 z-50 transition-colors duration-300">
  <div class="mx-auto max-w-3xl flex justify-between px-6 sm:px-8 py-4 lg:px-8">
    <!-- Left side: logo -->
    <div class="flex items-center flex-shrink-0 gap-3">
      <!-- Circle Avatar -->
      <div class="w-10 h-10 rounded-full bg-gray-800 text-white flex items-center justify-center font-bold">Q</div>

      <!-- Heading -->
    </div>

    <!-- Right side: header links -->
    <div class="flex gap-3 sm:gap-6 items-center">
      <div class="flex gap-1">
        {
          HEADER_LINKS.map((link) => (
            <HeaderLink href={link.url} background>
              {link.name}
            </HeaderLink>
          ))
        }
      </div>
      <!-- Optional: theme toggle / icons -->
      <div class="flex gap-2 items-center" transition:persist="header-theme-toggle">
        <!-- <ThemeToggle client:load /> -->
      </div>
    </div>
  </div>

  <div class="relative max-w-3xl mx-auto pointer-events-none">
    <div aria-hidden="true" class="absolute inset-x-0 -top-14 bottom-0 mx-auto max-w-3xl">
      <div class="to-(--color-border)/50 absolute bottom-0 left-0 top-0 w-px bg-gradient-to-b from-transparent to-75%"></div>
      <div class="to-(--color-border)/50 absolute bottom-0 right-0 top-0 w-px bg-gradient-to-b from-transparent to-75%"></div>
    </div>
  </div>
</header>

<SectionDivider className="border-t-border dark:border-t-border/50" />

<script>
  const header = document.getElementById('main-header')!

  function updateHeader() {
    if (window.scrollY > 0) {
      header.classList.add('backdrop-blur-lg', 'bg-background/60')
    } else {
      header.classList.remove('backdrop-blur-lg', 'bg-background/60')
    }
  }

  window.addEventListener('scroll', updateHeader)
  document.addEventListener('astro:after-swap', updateHeader)
  updateHeader() // Run on initial load

  const sections = document.querySelectorAll('div[id]')
  const navLinks = document.querySelectorAll('header nav a')

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => {
            const href = link.getAttribute('href')
            if (href) {
              link.classList.toggle('active', href.substring(2) === entry.target.id)
            }
          })
        }
      })
    },
    { threshold: 0.5 }
  )

  function observeSections() {
    const sections = document.querySelectorAll('div[id]')
    sections.forEach((section) => {
      observer.observe(section)
    })
  }

  observeSections()
  document.addEventListener('astro:after-swap', observeSections)
</script>

<style>
  header nav a.active {
    color: var(--color-primary);
  }
</style>
