---
import { HEADER_LINKS } from '~/config'
import ThemeToggle from '~/components/theme/ThemeToggle'
import HeaderGradient from '~/components/theme/HeaderGradient.astro'
import SectionDivider from '~/components/base/SectionDivider.astro'
import HeaderLink from '~/components/base/HeaderLink.astro'
import SearchSwitch from '~/components/base/SearchSwitch.astro'
import { Image } from 'astro:assets'
import favicon from '../../public/favicon.svg'
import MobileMenu from '~/components/base/MobileMenu.astro'
import ProfileMenu from '~/components/base/ProfileMenu.astro'
---

<MobileMenu />

<HeaderGradient />
<header id="main-header" class="sticky top-0 z-50 transition-colors duration-300">
  <div
    id="inside-header"
    class="mx-auto mt-3 sm:mt-6 z-50 flex items-center justify-between w-[95%] max-w-[720px] py-2 px-4 rounded-sm transition-all duration-300 overflow-hidden bg-white/80 dark:bg-[#0a0a0a]/80 backdrop-blur-md border border-gray-200/50 dark:border-gray-500/10 shadow-lg relative"
  >
    <!-- Left side: logo -->
    <div class="flex items-center flex-shrink-0 gap-3">
      <!-- Circle Avatar -->
      <div class="relative">
        <button id="avatar-button" class="w-10 h-10 rounded-full bg-gray-800 text-white flex items-center justify-center font-bold"
          >Q</button
        >

        <ProfileMenu />
      </div>

      <!-- Heading -->
    </div>

    <!-- Right side: header links -->
    <div class="flex gap-3 sm:gap-6 items-center">
      <nav class="hidden md:flex gap-1">
        {
          HEADER_LINKS.map((link) => (
            <HeaderLink href={link.url} background>
              {link.name}
            </HeaderLink>
          ))
        }
      </nav>

      <div class="md:hidden">
        <button id="open-menu-button" class="p-2">
          <span class="icon-[ri--menu-line] size-6"></span>
        </button>
      </div>

      <!-- Optional: theme toggle / icons -->
      <div class="flex gap-2 items-center" transition:persist="header-theme-toggle">
        <!-- <ThemeToggle client:load /> -->
      </div>
    </div>
  </div>

  <div class="relative max-w-3xl mx-auto pointer-events-none">
    <div aria-hidden="true" class="absolute inset-x-0 -top-14 bottom-0 mx-auto max-w-3xl">
      <div class="to-(--color-border)/0 absolute bottom-0 left-0 top-0 w-px bg-gradient-to-b from-transparent to-75%"></div>
      <div class="to-(--color-border)/0 absolute bottom-0 right-0 top-0 w-px bg-gradient-to-b from-transparent to-75%"></div>
    </div>
  </div>
</header>

<!-- <SectionDivider className="border-t-border dark:border-t-border/50" /> -->

<script>
  const header = document.getElementById('inside-header')!

  function updateHeader() {
    if (window.scrollY > 0) {
      header.classList.add('backdrop-blur-lg', 'bg-background/60')
    } else {
      header.classList.remove('backdrop-blur-lg', 'bg-background/60')
    }
  }

  window.addEventListener('scroll', updateHeader)
  document.addEventListener('astro:after-swap', updateHeader)
  updateHeader() // Run on initial load

  const sections = document.querySelectorAll('div[id]')
  const navLinks = document.querySelectorAll('header nav a')

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => {
            const href = link.getAttribute('href')
            if (href) {
              link.classList.toggle('active', href.substring(2) === entry.target.id)
            }
          })
        }
      })
    },
    { threshold: 0.5 }
  )

  function observeSections() {
    const sections = document.querySelectorAll('div[id]')
    sections.forEach((section) => {
      observer.observe(section)
    })
  }

  observeSections()
  document.addEventListener('astro:after-swap', observeSections)

  const mobileMenu = document.getElementById('mobile-menu')!
  const openMenuButton = document.getElementById('open-menu-button')!
  const openMenuIcon = openMenuButton.querySelector('span')!

  openMenuButton.addEventListener('click', () => {
    mobileMenu.classList.toggle('hidden')
    const isHidden = mobileMenu.classList.contains('hidden')
    openMenuIcon.classList.toggle('icon-[ri--menu-line]', isHidden)
    openMenuIcon.classList.toggle('icon-[ri--close-line]', !isHidden)
  })

  mobileMenu.querySelectorAll('a').forEach((link) => {
    link.addEventListener('click', () => {
      mobileMenu.classList.add('hidden')
      openMenuIcon.classList.remove('icon-[ri--close-line]')
      openMenuIcon.classList.add('icon-[ri--menu-line]')
    })
  })

  const avatarButton = document.getElementById('avatar-button')!
  const profileMenu = document.getElementById('profile-menu')!

  avatarButton.addEventListener('click', (event) => {
    console.log('Avatar button clicked')
    event.stopPropagation()
    profileMenu.classList.toggle('hidden')
    console.log('Profile menu hidden:', profileMenu.classList.contains('hidden'))
  })

  document.addEventListener('click', (event) => {
    const target = event.target as Node // âœ… cast to Node
    if (!profileMenu.contains(target) && !avatarButton.contains(target)) {
      profileMenu.classList.add('hidden')
    }
  })
</script>

<style>
  header nav a.active {
    color: var(--color-primary);
  }
</style>
